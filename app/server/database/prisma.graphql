# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Director implements Node {
  id: ID!
  api_id: Int!
  name: String!
}

type Genre implements Node {
  id: ID!
  api_id: Int!
  name: String!
}

type Movie implements Node {
  id: ID!
  api_id: Int!
  note: Float!
  original_language: String!
  titles(where: TitleWhereInput, orderBy: TitleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Title!]
  posters(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poster!]
  directors(where: DirectorWhereInput, orderBy: DirectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Director!]
  genres(where: GenreWhereInput, orderBy: GenreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Genre!]
}

type MovieCollection implements Node {
  id: ID!
  title: String!
  content(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie!]
  adult_content: Boolean!
  public: Boolean!
}

type Poster implements Node {
  id: ID!
  path: String!
  language: String!
}

type Title implements Node {
  id: ID!
  title: String!
  language: String!
}


#
# Other Types
#

type AggregateDirector {
  count: Int!
}

type AggregateGenre {
  count: Int!
}

type AggregateMovie {
  count: Int!
}

type AggregateMovieCollection {
  count: Int!
}

type AggregatePoster {
  count: Int!
}

type AggregateTitle {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type DirectorConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [DirectorEdge]!
  aggregate: AggregateDirector!
}

input DirectorCreateInput {
  api_id: Int!
  name: String!
}

input DirectorCreateManyInput {
  create: [DirectorCreateInput!]
  connect: [DirectorWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type DirectorEdge {
  """
  The item at the end of the edge.
  """
  node: Director!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum DirectorOrderByInput {
  id_ASC
  id_DESC
  api_id_ASC
  api_id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DirectorPreviousValues {
  id: ID!
  api_id: Int!
  name: String!
}

type DirectorSubscriptionPayload {
  mutation: MutationType!
  node: Director
  updatedFields: [String!]
  previousValues: DirectorPreviousValues
}

input DirectorSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DirectorSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DirectorSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DirectorWhereInput
}

input DirectorUpdateDataInput {
  api_id: Int
  name: String
}

input DirectorUpdateInput {
  api_id: Int
  name: String
}

input DirectorUpdateManyInput {
  create: [DirectorCreateInput!]
  connect: [DirectorWhereUniqueInput!]
  disconnect: [DirectorWhereUniqueInput!]
  delete: [DirectorWhereUniqueInput!]
  update: [DirectorUpdateWithWhereUniqueNestedInput!]
  upsert: [DirectorUpsertWithWhereUniqueNestedInput!]
}

input DirectorUpdateWithWhereUniqueNestedInput {
  where: DirectorWhereUniqueInput!
  data: DirectorUpdateDataInput!
}

input DirectorUpsertWithWhereUniqueNestedInput {
  where: DirectorWhereUniqueInput!
  update: DirectorUpdateDataInput!
  create: DirectorCreateInput!
}

input DirectorWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DirectorWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [DirectorWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  api_id: Int
  """
  All values that are not equal to given value.
  """
  api_id_not: Int
  """
  All values that are contained in given list.
  """
  api_id_in: [Int!]
  """
  All values that are not contained in given list.
  """
  api_id_not_in: [Int!]
  """
  All values less than the given value.
  """
  api_id_lt: Int
  """
  All values less than or equal the given value.
  """
  api_id_lte: Int
  """
  All values greater than the given value.
  """
  api_id_gt: Int
  """
  All values greater than or equal the given value.
  """
  api_id_gte: Int
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

input DirectorWhereUniqueInput {
  id: ID
  api_id: Int
}

"""
A connection to a list of items.
"""
type GenreConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [GenreEdge]!
  aggregate: AggregateGenre!
}

input GenreCreateInput {
  api_id: Int!
  name: String!
}

input GenreCreateManyInput {
  create: [GenreCreateInput!]
  connect: [GenreWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type GenreEdge {
  """
  The item at the end of the edge.
  """
  node: Genre!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum GenreOrderByInput {
  id_ASC
  id_DESC
  api_id_ASC
  api_id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GenrePreviousValues {
  id: ID!
  api_id: Int!
  name: String!
}

type GenreSubscriptionPayload {
  mutation: MutationType!
  node: Genre
  updatedFields: [String!]
  previousValues: GenrePreviousValues
}

input GenreSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GenreSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GenreSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GenreWhereInput
}

input GenreUpdateDataInput {
  api_id: Int
  name: String
}

input GenreUpdateInput {
  api_id: Int
  name: String
}

input GenreUpdateManyInput {
  create: [GenreCreateInput!]
  connect: [GenreWhereUniqueInput!]
  disconnect: [GenreWhereUniqueInput!]
  delete: [GenreWhereUniqueInput!]
  update: [GenreUpdateWithWhereUniqueNestedInput!]
  upsert: [GenreUpsertWithWhereUniqueNestedInput!]
}

input GenreUpdateWithWhereUniqueNestedInput {
  where: GenreWhereUniqueInput!
  data: GenreUpdateDataInput!
}

input GenreUpsertWithWhereUniqueNestedInput {
  where: GenreWhereUniqueInput!
  update: GenreUpdateDataInput!
  create: GenreCreateInput!
}

input GenreWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GenreWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GenreWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  api_id: Int
  """
  All values that are not equal to given value.
  """
  api_id_not: Int
  """
  All values that are contained in given list.
  """
  api_id_in: [Int!]
  """
  All values that are not contained in given list.
  """
  api_id_not_in: [Int!]
  """
  All values less than the given value.
  """
  api_id_lt: Int
  """
  All values less than or equal the given value.
  """
  api_id_lte: Int
  """
  All values greater than the given value.
  """
  api_id_gt: Int
  """
  All values greater than or equal the given value.
  """
  api_id_gte: Int
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

input GenreWhereUniqueInput {
  id: ID
  api_id: Int
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""
A connection to a list of items.
"""
type MovieCollectionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [MovieCollectionEdge]!
  aggregate: AggregateMovieCollection!
}

input MovieCollectionCreateInput {
  title: String!
  adult_content: Boolean
  public: Boolean
  content: MovieCreateManyInput
}

"""
An edge in a connection.
"""
type MovieCollectionEdge {
  """
  The item at the end of the edge.
  """
  node: MovieCollection!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum MovieCollectionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  adult_content_ASC
  adult_content_DESC
  public_ASC
  public_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MovieCollectionPreviousValues {
  id: ID!
  title: String!
  adult_content: Boolean!
  public: Boolean!
}

type MovieCollectionSubscriptionPayload {
  mutation: MutationType!
  node: MovieCollection
  updatedFields: [String!]
  previousValues: MovieCollectionPreviousValues
}

input MovieCollectionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MovieCollectionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MovieCollectionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MovieCollectionWhereInput
}

input MovieCollectionUpdateInput {
  title: String
  adult_content: Boolean
  public: Boolean
  content: MovieUpdateManyInput
}

input MovieCollectionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MovieCollectionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MovieCollectionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  adult_content: Boolean
  """
  All values that are not equal to given value.
  """
  adult_content_not: Boolean
  public: Boolean
  """
  All values that are not equal to given value.
  """
  public_not: Boolean
  content_every: MovieWhereInput
  content_some: MovieWhereInput
  content_none: MovieWhereInput
}

input MovieCollectionWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type MovieConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [MovieEdge]!
  aggregate: AggregateMovie!
}

input MovieCreateInput {
  api_id: Int!
  note: Float!
  original_language: String!
  titles: TitleCreateManyInput
  posters: PosterCreateManyInput
  directors: DirectorCreateManyInput
  genres: GenreCreateManyInput
}

input MovieCreateManyInput {
  create: [MovieCreateInput!]
  connect: [MovieWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type MovieEdge {
  """
  The item at the end of the edge.
  """
  node: Movie!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum MovieOrderByInput {
  id_ASC
  id_DESC
  api_id_ASC
  api_id_DESC
  note_ASC
  note_DESC
  original_language_ASC
  original_language_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MoviePreviousValues {
  id: ID!
  api_id: Int!
  note: Float!
  original_language: String!
}

type MovieSubscriptionPayload {
  mutation: MutationType!
  node: Movie
  updatedFields: [String!]
  previousValues: MoviePreviousValues
}

input MovieSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MovieSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MovieSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MovieWhereInput
}

input MovieUpdateDataInput {
  api_id: Int
  note: Float
  original_language: String
  titles: TitleUpdateManyInput
  posters: PosterUpdateManyInput
  directors: DirectorUpdateManyInput
  genres: GenreUpdateManyInput
}

input MovieUpdateInput {
  api_id: Int
  note: Float
  original_language: String
  titles: TitleUpdateManyInput
  posters: PosterUpdateManyInput
  directors: DirectorUpdateManyInput
  genres: GenreUpdateManyInput
}

input MovieUpdateManyInput {
  create: [MovieCreateInput!]
  connect: [MovieWhereUniqueInput!]
  disconnect: [MovieWhereUniqueInput!]
  delete: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueNestedInput!]
  upsert: [MovieUpsertWithWhereUniqueNestedInput!]
}

input MovieUpdateWithWhereUniqueNestedInput {
  where: MovieWhereUniqueInput!
  data: MovieUpdateDataInput!
}

input MovieUpsertWithWhereUniqueNestedInput {
  where: MovieWhereUniqueInput!
  update: MovieUpdateDataInput!
  create: MovieCreateInput!
}

input MovieWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MovieWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MovieWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  api_id: Int
  """
  All values that are not equal to given value.
  """
  api_id_not: Int
  """
  All values that are contained in given list.
  """
  api_id_in: [Int!]
  """
  All values that are not contained in given list.
  """
  api_id_not_in: [Int!]
  """
  All values less than the given value.
  """
  api_id_lt: Int
  """
  All values less than or equal the given value.
  """
  api_id_lte: Int
  """
  All values greater than the given value.
  """
  api_id_gt: Int
  """
  All values greater than or equal the given value.
  """
  api_id_gte: Int
  note: Float
  """
  All values that are not equal to given value.
  """
  note_not: Float
  """
  All values that are contained in given list.
  """
  note_in: [Float!]
  """
  All values that are not contained in given list.
  """
  note_not_in: [Float!]
  """
  All values less than the given value.
  """
  note_lt: Float
  """
  All values less than or equal the given value.
  """
  note_lte: Float
  """
  All values greater than the given value.
  """
  note_gt: Float
  """
  All values greater than or equal the given value.
  """
  note_gte: Float
  original_language: String
  """
  All values that are not equal to given value.
  """
  original_language_not: String
  """
  All values that are contained in given list.
  """
  original_language_in: [String!]
  """
  All values that are not contained in given list.
  """
  original_language_not_in: [String!]
  """
  All values less than the given value.
  """
  original_language_lt: String
  """
  All values less than or equal the given value.
  """
  original_language_lte: String
  """
  All values greater than the given value.
  """
  original_language_gt: String
  """
  All values greater than or equal the given value.
  """
  original_language_gte: String
  """
  All values containing the given string.
  """
  original_language_contains: String
  """
  All values not containing the given string.
  """
  original_language_not_contains: String
  """
  All values starting with the given string.
  """
  original_language_starts_with: String
  """
  All values not starting with the given string.
  """
  original_language_not_starts_with: String
  """
  All values ending with the given string.
  """
  original_language_ends_with: String
  """
  All values not ending with the given string.
  """
  original_language_not_ends_with: String
  titles_every: TitleWhereInput
  titles_some: TitleWhereInput
  titles_none: TitleWhereInput
  posters_every: PosterWhereInput
  posters_some: PosterWhereInput
  posters_none: PosterWhereInput
  directors_every: DirectorWhereInput
  directors_some: DirectorWhereInput
  directors_none: DirectorWhereInput
  genres_every: GenreWhereInput
  genres_some: GenreWhereInput
  genres_none: GenreWhereInput
}

input MovieWhereUniqueInput {
  id: ID
  api_id: Int
}

type Mutation {
  createTitle(data: TitleCreateInput!): Title!
  createPoster(data: PosterCreateInput!): Poster!
  createMovie(data: MovieCreateInput!): Movie!
  createMovieCollection(data: MovieCollectionCreateInput!): MovieCollection!
  createDirector(data: DirectorCreateInput!): Director!
  createGenre(data: GenreCreateInput!): Genre!
  updateTitle(data: TitleUpdateInput!, where: TitleWhereUniqueInput!): Title
  updatePoster(data: PosterUpdateInput!, where: PosterWhereUniqueInput!): Poster
  updateMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  updateMovieCollection(data: MovieCollectionUpdateInput!, where: MovieCollectionWhereUniqueInput!): MovieCollection
  updateDirector(data: DirectorUpdateInput!, where: DirectorWhereUniqueInput!): Director
  updateGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre
  deleteTitle(where: TitleWhereUniqueInput!): Title
  deletePoster(where: PosterWhereUniqueInput!): Poster
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deleteMovieCollection(where: MovieCollectionWhereUniqueInput!): MovieCollection
  deleteDirector(where: DirectorWhereUniqueInput!): Director
  deleteGenre(where: GenreWhereUniqueInput!): Genre
  upsertTitle(where: TitleWhereUniqueInput!, create: TitleCreateInput!, update: TitleUpdateInput!): Title!
  upsertPoster(where: PosterWhereUniqueInput!, create: PosterCreateInput!, update: PosterUpdateInput!): Poster!
  upsertMovie(where: MovieWhereUniqueInput!, create: MovieCreateInput!, update: MovieUpdateInput!): Movie!
  upsertMovieCollection(where: MovieCollectionWhereUniqueInput!, create: MovieCollectionCreateInput!, update: MovieCollectionUpdateInput!): MovieCollection!
  upsertDirector(where: DirectorWhereUniqueInput!, create: DirectorCreateInput!, update: DirectorUpdateInput!): Director!
  upsertGenre(where: GenreWhereUniqueInput!, create: GenreCreateInput!, update: GenreUpdateInput!): Genre!
  updateManyTitles(data: TitleUpdateInput!, where: TitleWhereInput): BatchPayload!
  updateManyPosters(data: PosterUpdateInput!, where: PosterWhereInput): BatchPayload!
  updateManyMovies(data: MovieUpdateInput!, where: MovieWhereInput): BatchPayload!
  updateManyMovieCollections(data: MovieCollectionUpdateInput!, where: MovieCollectionWhereInput): BatchPayload!
  updateManyDirectors(data: DirectorUpdateInput!, where: DirectorWhereInput): BatchPayload!
  updateManyGenres(data: GenreUpdateInput!, where: GenreWhereInput): BatchPayload!
  deleteManyTitles(where: TitleWhereInput): BatchPayload!
  deleteManyPosters(where: PosterWhereInput): BatchPayload!
  deleteManyMovies(where: MovieWhereInput): BatchPayload!
  deleteManyMovieCollections(where: MovieCollectionWhereInput): BatchPayload!
  deleteManyDirectors(where: DirectorWhereInput): BatchPayload!
  deleteManyGenres(where: GenreWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PosterConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PosterEdge]!
  aggregate: AggregatePoster!
}

input PosterCreateInput {
  path: String!
  language: String!
}

input PosterCreateManyInput {
  create: [PosterCreateInput!]
  connect: [PosterWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type PosterEdge {
  """
  The item at the end of the edge.
  """
  node: Poster!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PosterOrderByInput {
  id_ASC
  id_DESC
  path_ASC
  path_DESC
  language_ASC
  language_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PosterPreviousValues {
  id: ID!
  path: String!
  language: String!
}

type PosterSubscriptionPayload {
  mutation: MutationType!
  node: Poster
  updatedFields: [String!]
  previousValues: PosterPreviousValues
}

input PosterSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PosterSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PosterSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PosterWhereInput
}

input PosterUpdateDataInput {
  path: String
  language: String
}

input PosterUpdateInput {
  path: String
  language: String
}

input PosterUpdateManyInput {
  create: [PosterCreateInput!]
  connect: [PosterWhereUniqueInput!]
  disconnect: [PosterWhereUniqueInput!]
  delete: [PosterWhereUniqueInput!]
  update: [PosterUpdateWithWhereUniqueNestedInput!]
  upsert: [PosterUpsertWithWhereUniqueNestedInput!]
}

input PosterUpdateWithWhereUniqueNestedInput {
  where: PosterWhereUniqueInput!
  data: PosterUpdateDataInput!
}

input PosterUpsertWithWhereUniqueNestedInput {
  where: PosterWhereUniqueInput!
  update: PosterUpdateDataInput!
  create: PosterCreateInput!
}

input PosterWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PosterWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PosterWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  path: String
  """
  All values that are not equal to given value.
  """
  path_not: String
  """
  All values that are contained in given list.
  """
  path_in: [String!]
  """
  All values that are not contained in given list.
  """
  path_not_in: [String!]
  """
  All values less than the given value.
  """
  path_lt: String
  """
  All values less than or equal the given value.
  """
  path_lte: String
  """
  All values greater than the given value.
  """
  path_gt: String
  """
  All values greater than or equal the given value.
  """
  path_gte: String
  """
  All values containing the given string.
  """
  path_contains: String
  """
  All values not containing the given string.
  """
  path_not_contains: String
  """
  All values starting with the given string.
  """
  path_starts_with: String
  """
  All values not starting with the given string.
  """
  path_not_starts_with: String
  """
  All values ending with the given string.
  """
  path_ends_with: String
  """
  All values not ending with the given string.
  """
  path_not_ends_with: String
  language: String
  """
  All values that are not equal to given value.
  """
  language_not: String
  """
  All values that are contained in given list.
  """
  language_in: [String!]
  """
  All values that are not contained in given list.
  """
  language_not_in: [String!]
  """
  All values less than the given value.
  """
  language_lt: String
  """
  All values less than or equal the given value.
  """
  language_lte: String
  """
  All values greater than the given value.
  """
  language_gt: String
  """
  All values greater than or equal the given value.
  """
  language_gte: String
  """
  All values containing the given string.
  """
  language_contains: String
  """
  All values not containing the given string.
  """
  language_not_contains: String
  """
  All values starting with the given string.
  """
  language_starts_with: String
  """
  All values not starting with the given string.
  """
  language_not_starts_with: String
  """
  All values ending with the given string.
  """
  language_ends_with: String
  """
  All values not ending with the given string.
  """
  language_not_ends_with: String
}

input PosterWhereUniqueInput {
  id: ID
}

type Query {
  titles(where: TitleWhereInput, orderBy: TitleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Title]!
  posters(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poster]!
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie]!
  movieCollections(where: MovieCollectionWhereInput, orderBy: MovieCollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MovieCollection]!
  directors(where: DirectorWhereInput, orderBy: DirectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Director]!
  genres(where: GenreWhereInput, orderBy: GenreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Genre]!
  title(where: TitleWhereUniqueInput!): Title
  poster(where: PosterWhereUniqueInput!): Poster
  movie(where: MovieWhereUniqueInput!): Movie
  movieCollection(where: MovieCollectionWhereUniqueInput!): MovieCollection
  director(where: DirectorWhereUniqueInput!): Director
  genre(where: GenreWhereUniqueInput!): Genre
  titlesConnection(where: TitleWhereInput, orderBy: TitleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TitleConnection!
  postersConnection(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PosterConnection!
  moviesConnection(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovieConnection!
  movieCollectionsConnection(where: MovieCollectionWhereInput, orderBy: MovieCollectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovieCollectionConnection!
  directorsConnection(where: DirectorWhereInput, orderBy: DirectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DirectorConnection!
  genresConnection(where: GenreWhereInput, orderBy: GenreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GenreConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  title(where: TitleSubscriptionWhereInput): TitleSubscriptionPayload
  poster(where: PosterSubscriptionWhereInput): PosterSubscriptionPayload
  movie(where: MovieSubscriptionWhereInput): MovieSubscriptionPayload
  movieCollection(where: MovieCollectionSubscriptionWhereInput): MovieCollectionSubscriptionPayload
  director(where: DirectorSubscriptionWhereInput): DirectorSubscriptionPayload
  genre(where: GenreSubscriptionWhereInput): GenreSubscriptionPayload
}

"""
A connection to a list of items.
"""
type TitleConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [TitleEdge]!
  aggregate: AggregateTitle!
}

input TitleCreateInput {
  title: String!
  language: String!
}

input TitleCreateManyInput {
  create: [TitleCreateInput!]
  connect: [TitleWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type TitleEdge {
  """
  The item at the end of the edge.
  """
  node: Title!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TitleOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  language_ASC
  language_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TitlePreviousValues {
  id: ID!
  title: String!
  language: String!
}

type TitleSubscriptionPayload {
  mutation: MutationType!
  node: Title
  updatedFields: [String!]
  previousValues: TitlePreviousValues
}

input TitleSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TitleSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TitleSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TitleWhereInput
}

input TitleUpdateDataInput {
  title: String
  language: String
}

input TitleUpdateInput {
  title: String
  language: String
}

input TitleUpdateManyInput {
  create: [TitleCreateInput!]
  connect: [TitleWhereUniqueInput!]
  disconnect: [TitleWhereUniqueInput!]
  delete: [TitleWhereUniqueInput!]
  update: [TitleUpdateWithWhereUniqueNestedInput!]
  upsert: [TitleUpsertWithWhereUniqueNestedInput!]
}

input TitleUpdateWithWhereUniqueNestedInput {
  where: TitleWhereUniqueInput!
  data: TitleUpdateDataInput!
}

input TitleUpsertWithWhereUniqueNestedInput {
  where: TitleWhereUniqueInput!
  update: TitleUpdateDataInput!
  create: TitleCreateInput!
}

input TitleWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TitleWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TitleWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  language: String
  """
  All values that are not equal to given value.
  """
  language_not: String
  """
  All values that are contained in given list.
  """
  language_in: [String!]
  """
  All values that are not contained in given list.
  """
  language_not_in: [String!]
  """
  All values less than the given value.
  """
  language_lt: String
  """
  All values less than or equal the given value.
  """
  language_lte: String
  """
  All values greater than the given value.
  """
  language_gt: String
  """
  All values greater than or equal the given value.
  """
  language_gte: String
  """
  All values containing the given string.
  """
  language_contains: String
  """
  All values not containing the given string.
  """
  language_not_contains: String
  """
  All values starting with the given string.
  """
  language_starts_with: String
  """
  All values not starting with the given string.
  """
  language_not_starts_with: String
  """
  All values ending with the given string.
  """
  language_ends_with: String
  """
  All values not ending with the given string.
  """
  language_not_ends_with: String
}

input TitleWhereUniqueInput {
  id: ID
}
